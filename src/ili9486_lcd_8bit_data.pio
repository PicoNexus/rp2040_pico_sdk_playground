.program ili9486_lcd_8bit_data

; Shifts 8 bits of data to the LCD data pins d0, d1, d2, d3, d4, d5, d6, d7
; Use set pin (for ENABLE/WR) to pulse.

.define WR_DELAY 6

.wrap_target
start:
    pull
    out x 16                   ; first 16-bit are intepreted as length of the xfer           
    jmp !x send_data           ; zero is a special value siginfying single 8-bit xfer
    mov y x
send_colors:                   ; non-zero values are (DMA) xfers of the display color data
    pull
next_bit:
    set pins 0
    out x, 1
    jmp !x off_send            ; every bit is expanded to 16-bit color code
on_send:
    set x 7                    ; encoding color green (0xE007)
    mov pins x
    set pins 1 [WR_DELAY]
    set pins 0
    set x 31
    mov x !x
    mov pins x
    jmp send_end
off_send:
    mov pins x
    set pins 1 [WR_DELAY]
    set pins 0
    mov pins x
send_end:
    set pins 1
    jmp !osre next_bit
    jmp y-- send_colors
    set x 1
    mov isr x
    push
    jmp start
send_data:
    pull
    set pins 0
    out pins 8
    set pins 1
.wrap


% c-sdk {

static inline void ili9486_lcd_8bit_data_program_init(PIO pio, uint sm, uint offset, uint data_pin_offset, uint wr_pin) {

    pio_sm_set_enabled(pio, sm, false);
    pio_sm_clear_fifos(pio, sm);
    pio_sm_restart(pio, sm);

    pio_sm_config c = ili9486_lcd_8bit_data_program_get_default_config(offset);

    for (uint i = 0; i < 8; i++)
    {
        pio_gpio_init(pio, data_pin_offset+i);
    }
    pio_gpio_init(pio, wr_pin);

    sm_config_set_out_pins(&c, data_pin_offset, 8);

    sm_config_set_set_pins(&c, wr_pin, 1);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin_offset, 8, true);
    pio_sm_set_consecutive_pindirs(pio, sm, wr_pin, 1, true);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}


%}
